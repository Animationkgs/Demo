{"data":{"lesson":{"id":39495,"key":"48686722","title":"Extra Challenge Problems","semantic_type":"Lesson","is_public":true,"version":"1.0.0","locale":"en-us","summary":null,"lesson_type":"Classroom","display_workspace_project_only":null,"resources":{"files":[{"name":"Videos Zip File","uri":"http://d2uz2655q5g6b2.cloudfront.net/48686722/39495/1516978576627/Extra%20Challenge%20Problems%20Videos.zip"},{"name":"Transcripts Zip File","uri":"http://d2uz2655q5g6b2.cloudfront.net/48686722/39495/1516978572823/Extra%20Challenge%20Problems%20Subtitles.zip"}],"google_plus_link":null,"career_resource_center_link":null,"coaching_appointments_link":null,"office_hours_link":null,"aws_provisioning_link":null},"project":null,"lab":null,"concepts":[{"id":3934,"key":"486867210923","title":"Top Two","semantic_type":"Concept","is_public":true,"user_state":{"node_key":"486867210923","completed_at":"2020-03-27T05:53:27.124Z","last_viewed_at":"2020-03-27T05:53:25.744Z","unstructured":null},"resources":null,"atoms":[{"id":42275,"key":"48686721","title":"Top Two","semantic_type":"QuizAtom","is_public":true,"instructor_notes":"Also, if only one path is possible to a node then instead of creating as an entry in the dictionary of a list with two items, create a list with one item.\n\nSecond, having loops in your path doesn't make sense.  So don't do it.\n\nIf you'd like to discuss your solution and compare it to others:  <http://forums.udacity.com/cs215/questions/6314/spoiler-extra-challenge-top-two-solutions>","user_state":{"node_key":"48686721","completed_at":null,"last_viewed_at":null,"unstructured":null},"instruction":{"video":{"youtube_id":"SF8Ox_92bNw","china_cdn_id":"SF8Ox_92bNw.mp4","topher_id":"855af4be-d4a2-11e9-ab5e-a746096acf5f","transcodings":{"uri_480p_mp4":"https://video.udacity-data.com/topher/2016/September/57d1e968_top-two-intro-to-algorithms/top-two-intro-to-algorithms_480p.mp4","uri_720p_mp4":"https://video.udacity-data.com/topher/2016/September/57d1e968_top-two-intro-to-algorithms/top-two-intro-to-algorithms_720p.mp4","uri_480p_1000kbps_mp4":"https://video.udacity-data.com/topher/2016/September/57d1e968_top-two-intro-to-algorithms/top-two-intro-to-algorithms_480p_1000kbps.mp4"}},"text":null},"question":{"title":"Top Two","semantic_type":"ProgrammingQuestion","evaluation_id":"48747002","initial_code_files":[{"text":"#\n# write a function, `top_two` that takes in a graph and a starting\n# node and returns two paths, the first and second shortest paths,\n# for all the other nodes in the graph.  You can assume that the \n# graph is connected.\n#\n\ndef top_two(graph, start):\n    # your code here\n    #\n    # the result should be a dictionary, containing a mapping between\n    # every node in the graph, except the start node, to a list.  The\n    # list should contain two elements.  Each element should contain a\n    # cost to get to that node and the path followed.  See the `test`\n    # function for an example\n    #\n    pass\n\ndef test():\n    graph = {'a':{'b':3, 'c':4, 'd':8},\n             'b':{'a':3, 'c':1, 'd':2},\n             'c':{'a':4, 'b':1, 'd':2},\n             'd':{'a':8, 'b':2, 'c':2}}\n    result = top_two(graph, 'a') # this is a dictionary\n    b = result['b'] # this is a list\n    b_first = b[0] # this is a list\n    assert b_first[0] == 3 # the cost to get to 'b'\n    assert b_first[1] == ['a', 'b'] # the path to 'b'\n    b_second = b[1] # this is a list\n    assert b_second[0] == 5 # the cost to get to 'b'\n    assert b_second[1] == ['a', 'c', 'b']\n\n\n\n","name":"studentMain.py"}]},"answer":{"text":null,"video":{"youtube_id":null,"china_cdn_id":"undefined.mp4","topher_id":null,"transcodings":null}}}]}]}}}