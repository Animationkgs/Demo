{
  "data": {
    "lesson": {
      "id": 73085,
      "key": "3423258756",
      "title": "Elements of SQL",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Start learning SQL by using the select and insert statements to read and write data in database tables.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/3423258756/73085/1516802871381/Elements%20of%20SQL%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/3423258756/73085/1516802830866/Elements%20of%20SQL%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 40773,
          "key": "35212186880923",
          "title": "SQL is for Elephants",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35212186880923",
            "completed_at": "2016-03-13T12:04:05.748Z",
            "last_viewed_at": "2020-03-27T07:30:44.579Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 79249,
              "key": "3521218688",
              "title": "SQL is for Elephants",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "For a quick reference on the material in this lesson, see the \"Reference\" page at the end of the lesson.",
              "video": {
                "youtube_id": "BYAyquwZmdM",
                "china_cdn_id": "BYAyquwZmdM.mp4",
                "topher_id": "853d65d4-d4a2-11e9-a1e2-833e4b0ba633",
                "transcodings": {
                  "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a640_sql-is-for-elephants-intro-to-relational-databases/sql-is-for-elephants-intro-to-relational-databases_480p.mp4",
                  "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a640_sql-is-for-elephants-intro-to-relational-databases/sql-is-for-elephants-intro-to-relational-databases_720p.mp4",
                  "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a640_sql-is-for-elephants-intro-to-relational-databases/sql-is-for-elephants-intro-to-relational-databases_480p_1000kbps.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 41775,
          "key": "34521185430923",
          "title": "Talk to the Zoo Database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "34521185430923",
            "completed_at": "2016-03-13T12:43:55.297Z",
            "last_viewed_at": "2020-03-27T07:31:37.167Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 3882,
              "key": "3452118543",
              "title": "Talk to the Zoo Database",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3452118543",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "yLeLxDyXCSY",
                  "china_cdn_id": "yLeLxDyXCSY.mp4",
                  "topher_id": "852d6b34-d4a2-11e9-bb78-d72153ab9bf6",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57cfb550_talk-to-the-zoo-database-intro-to-relational-databases/talk-to-the-zoo-database-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57cfb550_talk-to-the-zoo-database-intro-to-relational-databases/talk-to-the-zoo-database-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57cfb550_talk-to-the-zoo-database-intro-to-relational-databases/talk-to-the-zoo-database-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "Talk to the Zoo Database - Practical",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3473168656",
                "initial_code_files": [
                  {
                    "text": "# Try out this query! You'll see the results below.\n# You'll be seeing many more pages like this in the rest of this lesson.\n# For now, just test it out.\n\nQUERY = '''\nselect name, birthdate from animals where species = 'gorilla';\n'''",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "9AVeGkUcPYQ",
                  "china_cdn_id": "9AVeGkUcPYQ.mp4",
                  "topher_id": "8535fa4c-d4a2-11e9-98e3-2b7eb3d9075d",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0999e_talk-to-the-zoo-database-intro-to-relational-databases/talk-to-the-zoo-database-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0999e_talk-to-the-zoo-database-intro-to-relational-databases/talk-to-the-zoo-database-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0999e_talk-to-the-zoo-database-intro-to-relational-databases/talk-to-the-zoo-database-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            }
          ]
        },
        {
          "id": 25672,
          "key": "33885286990923",
          "title": "Types in the SQL World",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885286990923",
            "completed_at": "2016-03-13T12:44:28.365Z",
            "last_viewed_at": "2020-03-27T07:31:47.041Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 32345,
              "key": "3388528699",
              "title": "Types in the SQL World",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "8swA-PqlEP0",
                "china_cdn_id": "8swA-PqlEP0.mp4",
                "topher_id": "8562d10c-d4a2-11e9-bbcb-e3577ee39fa2",
                "transcodings": {
                  "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0981f_types-in-the-sql-world-intro-to-relational-databases/types-in-the-sql-world-intro-to-relational-databases_480p.mp4",
                  "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0981f_types-in-the-sql-world-intro-to-relational-databases/types-in-the-sql-world-intro-to-relational-databases_720p.mp4",
                  "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0981f_types-in-the-sql-world-intro-to-relational-databases/types-in-the-sql-world-intro-to-relational-databases_480p_1000kbps.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 14723,
          "key": "36220985350923",
          "title": "Just a few SQL types",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "36220985350923",
            "completed_at": "2016-03-13T12:46:12.956Z",
            "last_viewed_at": "2020-03-27T07:31:53.857Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 96432,
              "key": "3622098535",
              "title": "Just a few SQL types",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's just a sampling of the many data types that SQL supports. We won't be using most of these types in this course, though.\n\nThe exact list of types differs from one database to another. For a full list of types, check the manual for your database, such as [this one for PostgreSQL](http://www.postgresql.org/docs/9.4/static/datatype.html).\n\n## Text and string types\n\n**text** — a string of any length, like Python **str** or **unicode** types.  \n**char(n)** — a string of exactly *n* characters.  \n**varchar(n)** — a string of up to *n* characters.\n\n## Numeric types\n\n**integer** — an integer value, like Python **int**.  \n**real** — a floating-point value, like Python **float**. Accurate up to six decimal places.  \n**double precision** — a higher-precision floating-point value. Accurate up to 15 decimal places.  \n**decimal** — an exact decimal value.\n\n## Date and time types\n\n**date** — a calendar date; including year, month, and day.  \n**time** — a time of day.  \n**timestamp** — a date and time together.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 102847,
          "key": "33885287000923",
          "title": "Select Where",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287000923",
            "completed_at": "2016-03-13T12:54:32.879Z",
            "last_viewed_at": "2020-03-27T07:32:00.399Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 75671,
              "key": "3388528700",
              "title": "Select Where",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "The syntax of the **select** statement with a **where** clause:\n\n**select** *columns* **from** *tables* **where** *condition* **;**\n\nColumns are separated by commas; use ***** to select all columns.\n\nThe *condition* is a Boolean expression on column values. SQL supports the Boolean operations **and**, **or**, and **not** which work the same as in Python.\n\nWe can switch between the expression form **(not X) and (not Y)** and the form **not (X or Y)** because of a logic rule called DeMorgan's Law. You can read more about it [in its Wikipedia article](http://en.wikipedia.org/wiki/De_Morgan%27s_laws).",
              "user_state": {
                "node_key": "3388528700",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "GUD6yl0A1Aw",
                  "china_cdn_id": "GUD6yl0A1Aw.mp4",
                  "topher_id": "84d71392-d4a2-11e9-b0f5-c3d9c2d15f7e",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0fc40_select-where-intro-to-relational-databases/select-where-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0fc40_select-where-intro-to-relational-databases/select-where-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0fc40_select-where-intro-to-relational-databases/select-where-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "Select Where - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3520648602",
                "initial_code_files": [
                  {
                    "text": "# The query below finds the names and birthdates of all the gorillas.\n# \n# Modify it to make it find the names of all the animals that are not\n# gorillas and not named 'Max'.\n#\n\nQUERY = '''\nselect name, birthdate from animals where species = 'gorilla';\n'''",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "aznzJPXavDg",
                  "china_cdn_id": "aznzJPXavDg.mp4",
                  "topher_id": "853c0ca2-d4a2-11e9-9e00-ef9aeba5aec4",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a2dd_select-where-intro-to-relational-databases/select-where-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a2dd_select-where-intro-to-relational-databases/select-where-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a2dd_select-where-intro-to-relational-databases/select-where-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            }
          ]
        },
        {
          "id": 36088,
          "key": "33885287030923",
          "title": "Comparison Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287030923",
            "completed_at": "2016-03-13T16:05:48.517Z",
            "last_viewed_at": "2020-03-27T07:32:26.583Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 38925,
              "key": "3388528703",
              "title": "Comparison Operators",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "The big difference between comparison operators in SQL and in Python is that we use **=** for equality in SQL, whereas Python uses **==**.\n\nThe columns in the <strong>animals</strong> table are <strong>name</strong> (a text string), <strong>species</strong> (also a text string), and <strong>birthdate</strong> (a date).\n\nReminder: Dates in our databases will always be in the international standard format, e.g. <strong>'1999-12-31'</strong>. Make sure to put single quotes around dates.\n\n---\n\nThe comparison operators in SQL are almost the same as the ones in Python: **<** for less than, **>** for greater than, **!=** for not equal, **<=** for less than or equal, and so forth.\nOne difference is that SQL uses **=** instead of **==** to represent equality. You can apply all the basic comparison operators to strings, numbers, dates, and other values.\nAs a preview, here's the SQL command used to initially create this table:\n<pre>\ncreate table animals (\n    name text,\n    species text,\n    birthdate date\n);\n</pre>",
              "user_state": {
                "node_key": "3388528703",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "N5T8ouw1SGc",
                  "china_cdn_id": "N5T8ouw1SGc.mp4",
                  "topher_id": "85500c16-d4a2-11e9-8ce2-4fc5d3e8e522",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d17c49_comparison-operators-intro-to-relational-databases/comparison-operators-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d17c49_comparison-operators-intro-to-relational-databases/comparison-operators-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d17c49_comparison-operators-intro-to-relational-databases/comparison-operators-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "Comparison Operators - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3489548800",
                "initial_code_files": [
                  {
                    "text": "#\n# Find all the llamas born between January 1, 1995 and December 31, 1998.\n# Fill in the 'where' clause in this query.\n\nQUERY = '''\nselect name from animals where ...\n'''",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "0X7voyhbZ8k",
                  "china_cdn_id": "0X7voyhbZ8k.mp4",
                  "topher_id": "8530b7a8-d4a2-11e9-b98b-df1f0cdb8f61",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d06d20_comparison-operators-intro-to-relational-databases/comparison-operators-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d06d20_comparison-operators-intro-to-relational-databases/comparison-operators-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d06d20_comparison-operators-intro-to-relational-databases/comparison-operators-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            },
            {
              "id": 188245,
              "key": "bdedb2e9-432f-46b4-af89-ec17f5cda1b2",
              "title": "a",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The comparison operators in SQL are almost the same as the ones in Python: **<** for less than, **>** for greater than, **!=** for not equal, **<=** for less than or equal, and so forth.\nOne difference is that SQL uses **=** instead of **==** to represent equality. You can apply all the basic comparison operators to strings, numbers, dates, and other values.\n\nThe columns in the <strong>animals</strong> table are <strong>name</strong> (a text string), <strong>species</strong> (also a text string), and <strong>birthdate</strong> (a date).\n\n**Reminder:** Dates in our databases will always be in the international standard format, e.g. <strong>'1999-12-31'</strong>. Make sure to put single quotes around dates.\n\n---\n\nAs a preview, here's the SQL command used to initially create this table:\n\n```\ncreate table animals (\n    name text,\n    species text,\n    birthdate date\n);\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 78671,
          "key": "33885287050923",
          "title": "The One Thing SQL is Terrible At",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287050923",
            "completed_at": "2016-03-13T16:06:34.049Z",
            "last_viewed_at": "2020-03-27T07:32:38.437Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 219734,
              "key": "8acc77fa-c313-4cbd-b2ce-40b65b6c3905",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ",
              "instructor_notes": ""
            },
            {
              "id": 24231,
              "key": "3388528705",
              "title": "The One Thing SQL is Terrible At",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wrjCB1abNyM",
                "china_cdn_id": "wrjCB1abNyM.mp4",
                "topher_id": "850870cc-d4a2-11e9-ba5c-ef03ed10721d",
                "transcodings": {
                  "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d29c41_the-one-thing-sql-is-terrible-at-intro-to-relational-databases/the-one-thing-sql-is-terrible-at-intro-to-relational-databases_480p.mp4",
                  "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d29c41_the-one-thing-sql-is-terrible-at-intro-to-relational-databases/the-one-thing-sql-is-terrible-at-intro-to-relational-databases_720p.mp4",
                  "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d29c41_the-one-thing-sql-is-terrible-at-intro-to-relational-databases/the-one-thing-sql-is-terrible-at-intro-to-relational-databases_480p_1000kbps.mp4"
                }
              }
            },
            {
              "id": 219733,
              "key": "f2ef0702-8d86-4356-ba49-19e004baecca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "-----\n\n# Reference\n\nFor reference, here's a list of all the tables in the zoo database:\n\n<h3>animals</h3>\nThis table lists individual animals in the zoo. Each animal has only one row. There may be multiple animals with the same name, or even multiple animals with the same name and species.\n<ul>\n<li>name — the animal's name (example: 'George')\n<li>species — the animal's species (example: 'gorilla')\n<li>birthdate — the animal's date of birth (example: '1998-05-18')\n</ul>\n\n<h3>diet</h3>\nThis table matches up species with the foods they eat. Every species in the zoo eats at least one sort of food, and many eat more than one. If a species eats more than one food, there will be more than one row for that species.\n<ul>\n<li>species — the name of a species (example: 'hyena')\n<li>food — the name of a food that species eats (example: 'meat')\n</ul>\n\n<h3>taxonomy</h3>\nThis table gives the (partial) biological taxonomic names for each species in the zoo. It can be used to find which species are more closely related to each other evolutionarily.\n<ul>\n<li>name — the common name of the species (e.g. 'jackal')\n<li>species — the taxonomic species name (e.g. 'aureus')\n<li>genus — the taxonomic genus name (e.g. 'Canis')\n<li>family — the taxonomic family name (e.g. 'Canidae')\n<li>t_order — the taxonomic order name (e.g. 'Carnivora')\n</ul>\n\nIf you've never heard of this classification, don't worry about it; the details won't be necessary for this course. But if you're curious, Wikipedia articles [Taxonomy](http://en.wikipedia.org/wiki/Biological_classification) and [Biological classification](http://en.wikipedia.org/wiki/Biological_classification) may help. \n\n<h3>ordernames</h3>\nThis table gives the common names for each of the taxonomic orders in the <strong>taxonomy</strong> table.\n<ul>\n<li>t_order — the taxonomic order name (e.g. 'Cetacea')\n<li>name — the common name (e.g. 'whales and dolphins')\n</ul>\n\n<h2>The SQL for it</h2>\n\nAnd here are the SQL commands that were used to create those tables. We won't cover the <strong>create table</strong> command until lesson 4, but it may be interesting to look at:\n\n```sql\ncreate table animals (  \n       name text,\n       species text,\n       birthdate date);\n\ncreate table diet (\n       species text,\n       food text);  \n\ncreate table taxonomy (\n       name text,\n       species text,\n       genus text,\n       family text,\n       t_order text); \n \ncreate table ordernames (\n       t_order text,\n       name text);\n```\n\n<em>Remember: In SQL, we always put string and date values inside single quotes.</em>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 120204,
          "key": "33885287060923",
          "title": "The Experiment Page",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287060923",
            "completed_at": "2016-03-13T16:08:28.010Z",
            "last_viewed_at": "2020-03-27T07:32:45.657Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 32834,
              "key": "3388528706",
              "title": "The Experiment Page",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "<h2>All the tables in the zoo database</h2>\n\n<h3>animals</h3>\nThis table lists individual animals in the zoo. Each animal has only one row. There may be multiple animals with the same name, or even multiple animals with the same name and species.\n<ul>\n<li>name — the animal's name (example: 'George')\n<li>species — the animal's species (example: 'gorilla')\n<li>birthdate — the animal's date of birth (example: '1998-05-18')\n</ul>\n\n<h3>diet</h3>\nThis table matches up species with the foods they eat. Every species in the zoo eats at least one sort of food, and many eat more than one. If a species eats more than one food, there will be more than one row for that species.\n<ul>\n<li>species — the name of a species (example: 'hyena')\n<li>food — the name of a food that species eats (example: 'meat')\n</ul>\n\n<h3>taxonomy</h3>\nThis table gives the (partial) biological taxonomic names for each species in the zoo. It can be used to find which species are more closely related to each other evolutionarily.\n<ul>\n<li>name — the common name of the species (e.g. 'jackal')\n<li>species — the taxonomic species name (e.g. 'aureus')\n<li>genus — the taxonomic genus name (e.g. 'Canis')\n<li>family — the taxonomic family name (e.g. 'Canidae')\n<li>t_order — the taxonomic order name (e.g. 'Carnivora')\n</ul>\n\nIf you've never heard of this classification, don't worry about it; the details won't be necessary for this course. But if you're curious, Wikipedia articles [Taxonomy](http://en.wikipedia.org/wiki/Biological_classification) and [Biological classification](http://en.wikipedia.org/wiki/Biological_classification) may help. \n\n<h3>ordernames</h3>\nThis table gives the common names for each of the taxonomic orders in the <strong>taxonomy</strong> table.\n<ul>\n<li>t_order — the taxonomic order name (e.g. 'Cetacea')\n<li>name — the common name (e.g. 'whales and dolphins')\n</ul>\n\n<h2>The SQL for it</h2>\n\nAnd here are the SQL commands that were used to create those tables. We won't cover the <strong>create table</strong> command until lesson 4, but it may be interesting to look at:\n\n<pre>\ncreate table animals (  \n       name text,\n       species text,\n       birthdate date);\n\ncreate table diet (\n       species text,\n       food text);  \n\ncreate table taxonomy (\n       name text,\n       species text,\n       genus text,\n       family text,\n       t_order text); \n \ncreate table ordernames (\n       t_order text,\n       name text);\n</pre>\n\n<em>Remember: In SQL, we always put string and date values inside single quotes.</em>\n\nThis is a Python code file, so make sure to be careful with indentation.\nRun your queries one a time to ensure ease of debugging if errors come up.",
              "user_state": {
                "node_key": "3388528706",
                "completed_at": "2016-04-05T08:04:24.521Z",
                "last_viewed_at": "2016-04-05T08:04:24.521Z",
                "unstructured": "{\"query.py\":\"#\\n# Uncomment one of these QUERY variables at a time and use \\\"Test Run\\\" to run it.\\n# You'll see the results below.  Then try your own queries as well!\\n#\\n\\nQUERY = \\\"select max(name) from animals;\\\"\\n\\n#QUERY = \\\"select * from animals limit 10;\\\"\\n\\n#QUERY = \\\"select * from animals where species = 'orangutan' order by birthdate;\\\"\\n\\n#QUERY = \\\"select name from animals where species = 'orangutan' order by birthdate desc;\\\"\\n\\n#QUERY = \\\"select name, birthdate from animals order by name limit 10 offset 20;\\\"\\n\\n#QUERY = \\\"select species, min(birthdate) from animals group by species;\\\"\\n\\n#QUERY = '''select name, count(*) as num from animals group by name order by num desc limit 5;'''\\n\\n\"}"
              },
              "instruction": {
                "video": {
                  "youtube_id": "-GlHaeB-vic",
                  "china_cdn_id": "-GlHaeB-vic.mp4",
                  "topher_id": "852fd752-d4a2-11e9-b722-3fbe27056794",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0695a_the-experiment-page-intro-to-relational-databases/the-experiment-page-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0695a_the-experiment-page-intro-to-relational-databases/the-experiment-page-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0695a_the-experiment-page-intro-to-relational-databases/the-experiment-page-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "The Experiment Page",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3103708712",
                "initial_code_files": [
                  {
                    "text": "#\n# Uncomment one of these QUERY variables at a time and use \"Test Run\" to run it.\n# You'll see the results below.  Then try your own queries as well!\n#\n\n# QUERY = \"select max(name) from animals;\"\n\n# QUERY = \"select * from animals limit 10;\"\n\n# QUERY = \"select * from animals where species = 'orangutan' order by birthdate;\"\n\n# QUERY = \"select name from animals where species = 'orangutan' order by birthdate desc;\"\n\n# QUERY = \"select name, birthdate from animals order by name limit 10 offset 20;\"\n\n# QUERY = \"select species, min(birthdate) from animals group by species;\"\n\n# QUERY = '''\n# select name, count(*) as num from animals\n# group by name\n# order by num desc\n# limit 5;\n# '''\n\n",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": null,
                  "china_cdn_id": "undefined.mp4",
                  "topher_id": null,
                  "transcodings": null
                }
              }
            }
          ]
        },
        {
          "id": 122481,
          "key": "33885287080923",
          "title": "Select Clauses",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287080923",
            "completed_at": "2016-03-13T21:37:02.055Z",
            "last_viewed_at": "2020-03-27T07:33:32.284Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 32370,
              "key": "3388528708",
              "title": "Select Clauses",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Here are the new **select** clauses introduced in the previous video:\n\n... **limit** *count*  \nReturn just the first *count* rows of the result table.\n\n... **limit** *count* **offset** *skip*  \nReturn *count* rows starting after the first *skip* rows.\n\n... **order by** *columns*  \n... **order by** *columns* **desc**  \nSort the rows using the *columns* (one or more, separated by commas) as the sort key. Numerical columns will be sorted in numerical order; string columns in alphabetical order. With **desc**, the order is reversed (**desc**-ending order).\n\n... **group by** *columns*  \nChange the behavior of aggregations such as **max**, **count**, and **sum**. With **group by**, the aggregation will return one row for each distinct value in *columns*.\n\n----\nWant to take another look at [the experiment page](https://classroom.udacity.com/courses/ud197/lessons/3423258756/concepts/33885287060923)?",
              "user_state": {
                "node_key": "3388528708",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "bR7EoKjN0EM",
                  "china_cdn_id": "bR7EoKjN0EM.mp4",
                  "topher_id": "853cdea2-d4a2-11e9-a057-87f3dcadaca7",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a594_select-clauses-intro-to-relational-databases/select-clauses-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a594_select-clauses-intro-to-relational-databases/select-clauses-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a594_select-clauses-intro-to-relational-databases/select-clauses-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "Select Clauses",
                "alt_text": null,
                "background_image": "//lh5.ggpht.com/plG7udfAGADtrfJ6XUDe6yAHIVKW9jjqaj0MPOdeiKYjq45M23qINOP6teqeNtNbgZVOC2MhyI0SiDmVKw=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3388528708",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "3432438686",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.405,
                      "y": 0.395
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check2",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.52,
                      "y": 0.395
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check3",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.635,
                      "y": 0.395
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check4",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.762,
                      "y": 0.395
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check5",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.9,
                      "y": 0.395
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check6",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.405,
                      "y": 0.515
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check7",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.52,
                      "y": 0.515
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check8",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.635,
                      "y": 0.515
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check9",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.762,
                      "y": 0.515
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check10",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.9,
                      "y": 0.515
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check11",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.405,
                      "y": 0.63
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check12",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.52,
                      "y": 0.63
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check13",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.635,
                      "y": 0.63
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check14",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.762,
                      "y": 0.63
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check15",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.9,
                      "y": 0.63
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "_bnZEnWWqXQ",
                  "china_cdn_id": "_bnZEnWWqXQ.mp4",
                  "topher_id": "853a948a-d4a2-11e9-99d7-2feedb77696f",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d09c27_select-clauses-intro-to-relational-databases/select-clauses-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d09c27_select-clauses-intro-to-relational-databases/select-clauses-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d09c27_select-clauses-intro-to-relational-databases/select-clauses-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            }
          ]
        },
        {
          "id": 69838,
          "key": "33885287110923",
          "title": "Why Do It in the Database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287110923",
            "completed_at": "2016-03-13T21:38:24.258Z",
            "last_viewed_at": "2020-03-27T07:33:41.644Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 4275,
              "key": "3388528711",
              "title": "Why Do It in the Database",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "6vfZYhhmuLU",
                "china_cdn_id": "6vfZYhhmuLU.mp4",
                "topher_id": "85348b08-d4a2-11e9-94c4-43ac2d4c069a",
                "transcodings": {
                  "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0905b_why-do-it-in-the-database-intro-to-relational-databases/why-do-it-in-the-database-intro-to-relational-databases_480p.mp4",
                  "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0905b_why-do-it-in-the-database-intro-to-relational-databases/why-do-it-in-the-database-intro-to-relational-databases_720p.mp4",
                  "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0905b_why-do-it-in-the-database-intro-to-relational-databases/why-do-it-in-the-database-intro-to-relational-databases_480p_1000kbps.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 52989,
          "key": "33885287120923",
          "title": "Count all the Species",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287120923",
            "completed_at": "2016-03-13T22:23:20.947Z",
            "last_viewed_at": "2020-03-27T07:33:49.763Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 114419,
              "key": "3388528712",
              "title": "Count all the Species",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "**<em>Note: for correct answer, order of columns in your query table should be species, number</em>**\n\n<h2>Select clauses</h2>\nThese are all the select clauses we've seen in the lesson so far.\n<h3>where</h3>\nThe <strong>where</strong> clause expresses <em>restrictions</em> — filtering a table for rows that follow a particular rule. <strong>where</strong> supports equalities, inequalities, and boolean operators (among other things):\n<ul>\n<li><strong>where species = 'gorilla'</strong> — return only rows that have 'gorilla' as the value of the species column.\n<li><strong>where name >= 'George'</strong> — return only rows where the name column is alphabetically after 'George'.\n<li><strong>where species != 'gorilla' and name != 'George'</strong> — return only rows where species isn't 'gorilla' and name isn't 'George'.\n</ul>\n<h3>limit / offset</h3>\nThe <strong>limit</strong> clause sets a limit on how many rows to return in the result table. The optional <strong>offset</strong> clause says how far to skip ahead into the results. So <strong>limit 10 offset 100</strong> will return 10 results starting with the 101st.\n<h3>order by</h3>\nThe <strong>order by</strong> clause tells the database how to sort the results — usually according to one or more columns. So <strong>order by species, name</strong> says to sort results first by the species column, then by name within each species.\n\nOrdering happens before limit/offset, so you can use them together to extract pages of alphabetized results. (Think of the pages of a dictionary.)\n\nThe optional <strong>desc</strong> modifier tells the database to order results in descending order — for instance from large numbers to small ones, or from Z to A.\n<h3>group by</h3>\nThe <strong>group by</strong> clause is only used with aggregations, such as <strong>max</strong> or <strong>sum</strong>. Without a <strong>group by</strong> clause, a select statement with an aggregation will aggregate over the whole selected table(s), returning only one row. With a <strong>group by</strong> clause, it will return one row for each distinct value of the column or expression in the <strong>group by</strong> clause.",
              "user_state": {
                "node_key": "3388528712",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "CvB2qkSk1Zc",
                  "china_cdn_id": "CvB2qkSk1Zc.mp4",
                  "topher_id": "853e6772-d4a2-11e9-a4c2-1f79b6c62416",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0accb_count-all-the-species-intro-to-relational-databases/count-all-the-species-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0accb_count-all-the-species-intro-to-relational-databases/count-all-the-species-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0accb_count-all-the-species-intro-to-relational-databases/count-all-the-species-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "Count All the Species - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3536338540",
                "initial_code_files": [
                  {
                    "text": "#\n# Write a query that returns all the species in the zoo, and how many animals of\n# each species there are, sorted with the most populous species at the top.\n# \n# The result should have two columns:  species and number.\n#\n# The animals table has columns (name, species, birthdate) for each individual.\n# \nQUERY = \"select ...\"\n",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "vfEi3aOawTI",
                  "china_cdn_id": "vfEi3aOawTI.mp4",
                  "topher_id": "850860dc-d4a2-11e9-ba2b-07c3149322fb",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d28236_count-all-the-species-intro-to-relational-databases/count-all-the-species-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d28236_count-all-the-species-intro-to-relational-databases/count-all-the-species-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d28236_count-all-the-species-intro-to-relational-databases/count-all-the-species-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            }
          ]
        },
        {
          "id": 41885,
          "key": "33885287150923",
          "title": "Insert: Adding Rows",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287150923",
            "completed_at": "2016-03-13T23:08:30.041Z",
            "last_viewed_at": "2020-03-27T07:33:59.750Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 8755,
              "key": "3388528715",
              "title": "Insert: Adding Rows",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3388528715",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "NRCs22HJ-vI",
                  "china_cdn_id": "NRCs22HJ-vI.mp4",
                  "topher_id": "84c78f94-d4a2-11e9-ae23-cfa3f9e6a87b",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d188dc_insert-adding-rows-intro-to-relational-databases/insert-adding-rows-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d188dc_insert-adding-rows-intro-to-relational-databases/insert-adding-rows-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d188dc_insert-adding-rows-intro-to-relational-databases/insert-adding-rows-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "Insert - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3488518630",
                "initial_code_files": [
                  {
                    "text": "#\n# Insert a newborn baby opossum into the animals table and verify that it's\n# been added. To do this, fill in the rest of SELECT_QUERY and INSERT_QUERY.\n# \n# SELECT_QUERY should find the names and birthdates of all opossums.\n# \n# INSERT_QUERY should add a new opossum to the table, whose birthdate is today.\n# (Or you can choose any other date you like.)\n#\n# The animals table has columns (name, species, birthdate) for each individual.\n#\n\nSELECT_QUERY = '''\nselect ... where ...;\n'''\n\nINSERT_QUERY = '''\ninsert into animals ...;\n'''\n\n",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "49B5hlxzTRc",
                  "china_cdn_id": "49B5hlxzTRc.mp4",
                  "topher_id": "84c79124-d4a2-11e9-ae28-3b19df476249",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d07c45_insert-adding-rows-intro-to-relational-databases/insert-adding-rows-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d07c45_insert-adding-rows-intro-to-relational-databases/insert-adding-rows-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d07c45_insert-adding-rows-intro-to-relational-databases/insert-adding-rows-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            },
            {
              "id": 220001,
              "key": "779637c6-1422-45b5-9fb2-137e127c87cb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The basic syntax for the **insert** statement:\n\n**insert into** *table* **(** *column1, column2, ...* **) values (** *val1, val2, ...* **);**\n\nIf the values are in the same order as the table's columns (starting with the first column), you don't have to specify the columns in the **insert** statement:\n\n**insert into** *table* **values (** *val1, val2, ...* **);**\n\nFor instance, if a table has three columns **(a, b, c)** and you want to insert into **a** and **b**, you can leave off the column names from the **insert** statement. But if you want to insert into **b** and **c**, or **a** and **c**, you have to specify the columns.\n\nA single **insert** statement can only insert into a single table. (Contrast this with the **select** statement, which can pull data from several tables using a join.)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 66930,
          "key": "33885287180923",
          "title": "Find the Fish Eaters",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287180923",
            "completed_at": "2016-03-13T23:53:10.129Z",
            "last_viewed_at": "2020-03-27T07:34:10.695Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 111880,
              "key": "3388528718",
              "title": "Find the Fish Eaters",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "To join two tables, first choose the *join condition*, or the rule you want the database to use to match rows from one table up with rows of the other table. Then write a join in terms of the columns in each table.\n\nFor instance, if you want to join tables **T** and **S** by matching rows where **T.color** is the same as **S.paint**, you'd write a select statement using **T join S on T.color = S.paint**.",
              "user_state": {
                "node_key": "3388528718",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "bcwFahJsww0",
                  "china_cdn_id": "bcwFahJsww0.mp4",
                  "topher_id": "852f3c2a-d4a2-11e9-b562-3bc86d1c174b",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0345f_find-the-fish-eaters-intro-to-relational-databases/find-the-fish-eaters-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0345f_find-the-fish-eaters-intro-to-relational-databases/find-the-fish-eaters-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0345f_find-the-fish-eaters-intro-to-relational-databases/find-the-fish-eaters-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "Find the Fish-Eaters - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3510498663",
                "initial_code_files": [
                  {
                    "text": "#\n# Find the names of the individual animals that eat fish.\n#\n# The animals table has columns (name, species, birthdate) for each individual.\n# The diet table has columns (species, food) for each food that a species eats.\n#\n\nQUERY = '''\nselect ...\n'''\n\n",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "AnksTk1zI3Y",
                  "china_cdn_id": "AnksTk1zI3Y.mp4",
                  "topher_id": "8562a074-d4a2-11e9-bb42-e37267b0b1b1",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a013_find-the-fish-eaters-intro-to-relational-databases/find-the-fish-eaters-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a013_find-the-fish-eaters-intro-to-relational-databases/find-the-fish-eaters-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a013_find-the-fish-eaters-intro-to-relational-databases/find-the-fish-eaters-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            }
          ]
        },
        {
          "id": 25448,
          "key": "33885287210923",
          "title": "After Aggregating",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287210923",
            "completed_at": "2016-03-14T02:43:14.081Z",
            "last_viewed_at": "2020-03-27T07:34:21.024Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 71818,
              "key": "3388528721",
              "title": "After Aggregating",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "The **having** clause works like the **where** clause, but it applies after **group by** aggregations take place. The syntax is like this:\n\n**select** *columns* **from** *tables* **group by** *column* **having** *condition* **;**\n\nUsually, at least one of the *columns* will be an aggregate function such as **count**, **max**, or **sum** on one of the tables' columns. In order to apply **having** to an aggregated column, you'll want to give it a name using **as**. For instance, if you had a table of items sold in a store, and you wanted to find all the items that have sold more than five units, you could use:\n\n```\nselect name, count(*) as num from sales having num > 5;\n```\n\n---\n\nYou can have a **select** statement that uses only **where**, or only **group by**, or **group by** and **having**, or **where** and **group by**, or all three of them!\n\nBut it doesn't usually make sense to use **having** without **group by**.\n\nIf you use both **where** and **having**, the **where** condition will filter the rows that are going into the aggregation, and the **having** condition will filter the rows that come out of it.\n\nYou can read more about **having** here:\n\nhttp://www.postgresql.org/docs/9.4/static/sql-select.html#SQL-HAVING\n\nThere are a few different ways to solve this, but here's one of them:\n\n```\nselect food, count(animals.name) as num\n       from diet join animals \n       on diet.species = animals.species\n       group by food\n       having num = 1\n```\n\nAnd here is another:\n\n```\nselect food, count(animals.name) as num\n       from diet, animals \n       where diet.species = animals.species\n       group by food\n       having num = 1\n```",
              "user_state": {
                "node_key": "3388528721",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "eeV5K5HKVx4",
                  "china_cdn_id": "eeV5K5HKVx4.mp4",
                  "topher_id": "84e15898-d4a2-11e9-9cc5-030cbab2d26e",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0ca0f_after-aggregating-intro-to-relational-databases/after-aggregating-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0ca0f_after-aggregating-intro-to-relational-databases/after-aggregating-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0ca0f_after-aggregating-intro-to-relational-databases/after-aggregating-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "After Aggregating - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3561858542",
                "initial_code_files": [
                  {
                    "text": "#\n# Find the one food that is eaten by only one animal.\n#\n# The animals table has columns (name, species, birthdate) for each individual.\n# The diet table has columns (species, food) for each food that a species eats.\n#\n\nQUERY = '''\nselect ...\n'''\n\n",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "kIITzFRh5mQ",
                  "china_cdn_id": "kIITzFRh5mQ.mp4",
                  "topher_id": "84cc7a7c-d4a2-11e9-bcab-cb56fd285dec",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d146a8_after-aggregating-intro-to-relational-databases/after-aggregating-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d146a8_after-aggregating-intro-to-relational-databases/after-aggregating-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d146a8_after-aggregating-intro-to-relational-databases/after-aggregating-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            }
          ]
        },
        {
          "id": 37679,
          "key": "33885287240923",
          "title": "More Join Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33885287240923",
            "completed_at": "2016-03-14T04:21:42.778Z",
            "last_viewed_at": "2020-03-27T07:34:32.016Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 93528,
              "key": "3388528724",
              "title": "More Join Practice",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "<h2>Tables introduced in this video</h2>\n\n<h3>taxonomy</h3>\nThis table gives the (partial) biological taxonomic names for each species in the zoo. It can be used to find which species are more closely related to each other evolutionarily.\n<ul>\n<li>name — the common name of the species (e.g. 'jackal')\n<li>species — the taxonomic species name (e.g. 'aureus')\n<li>genus — the taxonomic genus name (e.g. 'Canis')\n<li>family — the taxonomic family name (e.g. 'Canidae')\n<li>t_order — the taxonomic order name (e.g. 'Carnivora')\n</ul>\n\nIf you've never heard of this classification, don't worry about it; the details won't be necessary for this course. But if you're curious, Wikipedia articles [Taxonomy](http://en.wikipedia.org/wiki/Biological_classification) and [Biological classification](http://en.wikipedia.org/wiki/Biological_classification) may help. \n\n<h3>ordernames</h3>\nThis table gives the common names for each of the taxonomic orders in the <strong>taxonomy</strong> table.\n<ul>\n<li>t_order — the taxonomic order name (e.g. 'Cetacea')\n<li>name — the common name (e.g. 'whales and dolphins')\n</ul>\n\n<h2>All the tables in the zoo database</h2>\nIf you don't know what the contents of a table look like, you can always view all of it with **select \\* from *table***. But here's a summary of what all the tables in the zoo database contain:\n<h3>animals</h3>\nThis table lists individual animals in the zoo. Each animal has only one row. There may be multiple animals with the same name, or even multiple animals with the same name and species.\n<ul>\n<li>name — the animal's name (example: 'George')\n<li>species — the animal's species (example: 'gorilla')\n<li>birthdate — the animal's date of birth (example: '1998-05-18')\n</ul>\n<h3>diet</h3>\nThis table matches up species with the foods they eat. Every species in the zoo eats at least one sort of food, and many eat more than one. If a species eats more than one food, there will be more than one row for that species.\n<ul>\n<li>species — the name of a species (example: 'hyena')\n<li>food — the name of a food that species eats (example: 'meat')\n</ul>\n<h2>The SQL for it</h2>\nAnd here are the SQL commands that were used to create those tables. We won't cover the <strong>create table</strong> command until lesson 4, but it may be interesting to look at:\n<pre>\ncreate table animals (  \n       name text,\n       species text,\n       birthdate date);\ncreate table diet (\n       species text,\n       food text);  \ncreate table taxonomy (\n       name text,\n       species text,\n       genus text,\n       family text,\n       t_order text); \n \ncreate table ordernames (\n       t_order text,\n       name text);\n</pre>\n\nHere's one possible solution:\n<pre>\nselect ordernames.name, count(*) as num\n  from animals, taxonomy, ordernames\n  where animals.species = taxonomy.name\n    and taxonomy.t_order = ordernames.t_order\n  group by ordernames.name\n  order by num desc\n</pre>\nAnd here's another, this time using the explicit join style:\n<pre>\nselect ordernames.name, count(*) as num\n  from (animals join taxonomy \n                on animals.species = taxonomy.name)\n                as ani_tax\n        join ordernames\n             on ani_tax.t_order = ordernames.t_order\n  group by ordernames.name\n  order by num desc\n</pre>\nI think the upper version is much more readable than the lower one, because in the explicit join style you have to explicitly tell the database what order to join the tables in — <code>((a join b) join c)</code> — instead of just letting the database worry about that.\nIf you're using a more barebones database (like SQLite) there can be a performance benefit to the explicit join style. But in PostgreSQL, the more server-oriented database system we'll be using next lesson, the query planner should optimize away any difference.",
              "user_state": {
                "node_key": "3388528724",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "_7Vqou7k7fI",
                  "china_cdn_id": "_7Vqou7k7fI.mp4",
                  "topher_id": "8535e034-d4a2-11e9-9896-dfafdcafe0e6",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d09bd3_more-join-practice-intro-to-relational-databases/more-join-practice-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d09bd3_more-join-practice-intro-to-relational-databases/more-join-practice-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d09bd3_more-join-practice-intro-to-relational-databases/more-join-practice-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                },
                "text": null
              },
              "question": {
                "title": "More Join Practice - Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "3527458793",
                "initial_code_files": [
                  {
                    "text": "#\n# List all the taxonomic orders, using their common names, sorted by the number of\n# animals of that order that the zoo has.\n#\n# The animals table has (name, species, birthdate) for each individual.\n# The taxonomy table has (name, species, genus, family, t_order) for each species.\n# The ordernames table has (t_order, name) for each order.\n#\n# Be careful:  Each of these tables has a column \"name\", but they don't have the\n# same meaning!  animals.name is an animal's individual name.  taxonomy.name is\n# a species' common name (like 'brown bear').  And ordernames.name is the common\n# name of an order (like 'Carnivores').\n\nQUERY = '''\nselect ...\n'''\n\n",
                    "name": "query.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "bnwLadF8gKo",
                  "china_cdn_id": "bnwLadF8gKo.mp4",
                  "topher_id": "853cd3e4-d4a2-11e9-a039-8bb9f1836ae7",
                  "transcodings": {
                    "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a54a_more-join-practice-intro-to-relational-databases/more-join-practice-intro-to-relational-databases_480p.mp4",
                    "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a54a_more-join-practice-intro-to-relational-databases/more-join-practice-intro-to-relational-databases_720p.mp4",
                    "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a54a_more-join-practice-intro-to-relational-databases/more-join-practice-intro-to-relational-databases_480p_1000kbps.mp4"
                  }
                }
              }
            }
          ]
        },
        {
          "id": 131540,
          "key": "34921089680923",
          "title": "Wrap up",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "34921089680923",
            "completed_at": "2016-03-14T09:00:21.333Z",
            "last_viewed_at": "2020-03-27T07:34:55.430Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 122531,
              "key": "3492108968",
              "title": "Wrap up",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "## NOTE: Instructions have moved!\n\nThe instructions for installing the database software have moved to the next page of this course.",
              "video": {
                "youtube_id": "AWeudIezMa0",
                "china_cdn_id": "AWeudIezMa0.mp4",
                "topher_id": "84c7b852-d4a2-11e9-ae9f-8bdb08d648cf",
                "transcodings": {
                  "uri_480p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a289_wrap-up-intro-to-relational-databases/wrap-up-intro-to-relational-databases_480p.mp4",
                  "uri_720p_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a289_wrap-up-intro-to-relational-databases/wrap-up-intro-to-relational-databases_720p.mp4",
                  "uri_480p_1000kbps_mp4": "https://video.udacity-data.com/topher/2016/September/57d0a289_wrap-up-intro-to-relational-databases/wrap-up-intro-to-relational-databases_480p_1000kbps.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 220203,
          "key": "14c72fe3-e3fe-4959-9c4b-467cf5b7c3a0",
          "title": "Installing the Virtual Machine",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "14c72fe3-e3fe-4959-9c4b-467cf5b7c3a0",
            "completed_at": "2020-03-27T07:36:46.197Z",
            "last_viewed_at": "2020-03-27T07:36:44.815Z",
            "unstructured": null
          },
          "resources": {
            "files": [],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 220204,
              "key": "7520fba6-30f7-4393-9a0a-e32401c27a29",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Installing the Virtual Machine\n\nIn the next part of this course, you'll use a virtual machine (VM) to run an SQL database server and a web app that uses it. The VM is a Linux server system that runs on top of your own computer. You can share files easily between your computer and the VM; and you'll be running a web service inside the VM which you'll be able to access from your regular browser.\n\nWe're using tools called [Vagrant](https://www.vagrantup.com/) and [VirtualBox](https://www.virtualbox.org/wiki/Download_Old_Builds_5_1) to install and manage the VM. You'll need to install these to do some of the exercises. The instructions on this page will help you do this.\n\n### Conceptual overview\n\n[This video](https://www.youtube.com/watch?v=djnqoEO2rLc) offers a conceptual overview of virtual machines and Vagrant. You don't need to watch it to proceed, but you may find it informative.\n\n----\n\n# Use a terminal\n\nYou'll be doing these exercises using a Unix-style terminal on your computer. If you are using a **Mac or Linux** system, your regular terminal program will do just fine. On **Windows**, we recommend using the **Git Bash** terminal that comes with the Git software. If you don't already have Git installed, download Git from [git-scm.com](https://git-scm.com/downloads).\n\nFor a refresher on using the Unix shell, look back at [our Shell Workshop](https://www.udacity.com/course/ud206).\n\nIf you'd like to learn more about Git, take a look at [our course about Git](https://www.udacity.com/course/ud123).\n\n----\n\n# Install VirtualBox\n\nVirtualBox is the software that actually runs the virtual machine. [You can download it from virtualbox.org, here.](https://www.virtualbox.org/wiki/Download_Old_Builds_5_1) Install the *platform package* for your operating system.  You do not need the extension pack or the SDK. You do not need to launch VirtualBox after installing it; Vagrant will do that.\n\n**Ubuntu users:** If you are running Ubuntu 14.04, install VirtualBox using the Ubuntu Software Center instead. Due to a reported bug, installing VirtualBox from the site may uninstall other software you need.\n\n----\n\n#  Install Vagrant\n\nVagrant is the software that configures the VM and lets you share files between your host computer and the VM's filesystem.  [Download it from vagrantup.com.](https://www.vagrantup.com/downloads.html) Install the version for your operating system.\n\n**Windows users:** The Installer may ask you to grant network permissions to Vagrant or make a firewall exception. Be sure to allow this.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 220208,
              "key": "a0a8f8ed-a91f-4f49-9c63-f3cf9a5155f4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584881ee_screen-shot-2016-12-07-at-13.40.43/screen-shot-2016-12-07-at-13.40.43.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a0a8f8ed-a91f-4f49-9c63-f3cf9a5155f4",
              "caption": "_If Vagrant is successfully installed, you will be able to run_ `vagrant --version`  \n_in your terminal to see the version number._  \n_The shell prompt in your terminal may differ. Here, the_ `$` _sign is the shell prompt._",
              "alt": "If Vagrant is successfully installed, you will be able to run `vagrant --version`   in your terminal to see the version number.",
              "width": 144,
              "height": 61,
              "instructor_notes": null
            },
            {
              "id": 220207,
              "key": "af900f4f-1f30-41f7-ba36-ff1219ce2650",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n# Download the VM configuration\n\nThere are a couple of different ways you can download the VM configuration.\n\nYou can download and unzip this file: [FSND-Virtual-Machine.zip](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/April/5acfbfa3_fsnd-virtual-machine/fsnd-virtual-machine.zip) This will give you a directory called **FSND-Virtual-Machine**. It may be located inside your **Downloads** folder.\n\n**Note**: If you are using Windows OS you will find a Time Out error, to fix it use the new [Vagrant file configuration](https://s3.amazonaws.com/video.udacity-data.com/topher/2019/March/5c7ebe7a_vagrant-configuration-windows/vagrant-configuration-windows.zip) to replace you current Vagrant file.\n\nAlternately, you can use Github to fork and clone the repository https://github.com/udacity/fullstack-nanodegree-vm.\n\nEither way, you will end up with a new directory containing the VM files. Change to this directory in your terminal with `cd`. Inside, you will find another directory called **vagrant**. Change directory to the **vagrant** directory:\n",
              "instructor_notes": ""
            },
            {
              "id": 220205,
              "key": "332bd5ab-b3e4-4255-8471-3211ffa1b75d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58487f12_screen-shot-2016-12-07-at-13.28.31/screen-shot-2016-12-07-at-13.28.31.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/332bd5ab-b3e4-4255-8471-3211ffa1b75d",
              "caption": "_Navigating to the FSND-Virtual-Machine directory and listing the files in it._  \n_This picture was taken on a Mac, but the commands will look the same on Git Bash on Windows._",
              "alt": "Navigating to the FSND-Virtual-Machine directory and listing the files in it.",
              "width": 540,
              "height": 123,
              "instructor_notes": null
            },
            {
              "id": 220211,
              "key": "41f90281-af83-4617-9667-2b7609e53a83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Start the virtual machine\n\nFrom your terminal, inside the **vagrant** subdirectory, run the command `vagrant up`. This will cause Vagrant to download the Linux operating system and install it. This may take quite a while (many minutes) depending on how fast your Internet connection is.",
              "instructor_notes": ""
            },
            {
              "id": 220212,
              "key": "b8421e2f-0ca2-4c14-8c7b-2d8c554997da",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58488603_screen-shot-2016-12-07-at-13.57.50/screen-shot-2016-12-07-at-13.57.50.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b8421e2f-0ca2-4c14-8c7b-2d8c554997da",
              "caption": "_Starting the Ubuntu Linux installation with `vagrant up`._  \n_This screenshot shows just the beginning of many, many pages of output in a lot of colors._",
              "alt": "Starting the Ubuntu Linux installation with `vagrant up`",
              "width": 465,
              "height": 84,
              "instructor_notes": null
            },
            {
              "id": 220213,
              "key": "4b07a1ee-dd47-4746-9c09-7ce1f969f3e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When `vagrant up` is finished running, you will get your shell prompt back. At this point, you can run `vagrant ssh` to log in to your newly installed Linux VM!",
              "instructor_notes": ""
            },
            {
              "id": 220214,
              "key": "c793524e-fbbd-49a9-8bc3-8776ec92f00d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58488962_screen-shot-2016-12-07-at-14.12.29/screen-shot-2016-12-07-at-14.12.29.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c793524e-fbbd-49a9-8bc3-8776ec92f00d",
              "caption": "_Logging into the Linux VM with `vagrant ssh`._",
              "alt": "Logging into the Linux VM with `vagrant ssh`.",
              "width": 354,
              "height": 298,
              "instructor_notes": null
            },
            {
              "id": 220215,
              "key": "acf2a9b2-38ec-4e82-bf58-dea583d210d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Logged in!\n\nIf you are now looking at a shell prompt that starts with the word `vagrant` (as in the above screenshot), congratulations — you've gotten logged into your Linux VM.\n\nIf not, take a look at the **Troubleshooting** section below.\n\n## The files for this course\n\nInside the VM, change directory to `/vagrant` and look around with `ls`.\n\nThe files you see here are the same as the ones in the `vagrant` subdirectory on your computer (where you started Vagrant from). Any file you create in one will be automatically shared to the other. This means that you can edit code in your favorite text editor, and run it inside the VM.\n\nFiles in the VM's `/vagrant` directory are shared with the `vagrant` folder on your computer. But other data inside the VM is not. For instance, the PostgreSQL database itself lives only inside the VM.\n\n## Running the database\n\nThe PostgreSQL database server will automatically be started inside the VM. You can use the `psql` command-line tool to access it and run SQL statements:",
              "instructor_notes": ""
            },
            {
              "id": 220217,
              "key": "00a6fa00-d901-4b57-9ef8-09f940a6739c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58489186_screen-shot-2016-12-07-at-14.46.25/screen-shot-2016-12-07-at-14.46.25.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/00a6fa00-d901-4b57-9ef8-09f940a6739c",
              "caption": "_Running `psql`, the PostgreSQL command interface, inside the VM._",
              "alt": "Running `psql`, the PostgreSQL command interface, inside the VM.",
              "width": 296,
              "height": 154,
              "instructor_notes": null
            },
            {
              "id": 220216,
              "key": "24d23f52-1e96-42be-aefa-0d5ee6529138",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Logging out and in\n\nIf you type `exit` (or `Ctrl-D`) at the shell prompt inside the VM, you will be logged out, and put back into your host computer's shell. To log back in, make sure you're in the same directory and type `vagrant ssh` again.\n\nIf you reboot your computer, you will need to run `vagrant up` to restart the VM.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 220218,
              "key": "0f40621d-0b26-45df-94af-4b3d51b83c0d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n\n# Troubleshooting\n\n### I'm not sure if it worked.\n\nIf you can type `vagrant ssh` and log into your VM, then it worked! It's normal for the `vagrant up` process to display a lot of text in many colors, including sometimes scary-looking messages in red, green, and purple. If you get your shell prompt back at the end, and you can log in, it should be OK.\n\n### `vagrant up` is taking a long time. Why?\n\nBecause it's downloading a whole Linux operating system from the Internet.\n\n### I'm on Windows, and when I run `vagrant ssh`, I don't get a shell prompt.\n\nSome versions of Windows and Vagrant have a problem communicating the right settings for the terminal. There is a workaround: Instead of `vagrant ssh`, run the command `winpty vagrant ssh` instead.\n\n### I'm on Windows and getting an error about virtualization.\n\nSometimes other virtualization programs such as Docker or Hyper-V can interfere with VirtualBox. Try shutting these other programs down first.\n\nIn addition, some Windows PCs have settings in the BIOS or UEFI (firmware) or in the operating system that disable the use of virtualization. To change this, you may need to reboot your computer and access the firmware settings. [A web search](https://www.google.com/search?q=enable%20virtualization%20windows%2010) can help you find the settings for your computer and operating system. Unfortunately there are so many different versions of Windows and PCs that we can't offer a simple guide to doing this.\n\n### Why are we using a VM? It seems complicated.\n\nIt is complicated. In this case, the point of it is to be able to offer the same software (Linux and PostgreSQL) regardless of what kind of computer you're running on.\n\n### I got some other error message.\n\nIf you're getting a specific textual error message, try looking it up on your favorite search engine. If that doesn't help, take a screenshot and post it to the discussion forums, along with as much detail as you can provide about the process you went through to get there.\n\n### If all else fails, try an older version.\n\nUdacity mentors have noticed that some newer versions of Vagrant don't work on all operating systems. Version 1.9.2 is reported to be stabler on some systems, and version 1.9.1 is the supported version on Ubuntu 17.04. You can download older versions of Vagrant from [the Vagrant releases index](https://releases.hashicorp.com/vagrant/).",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}